<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
@if('request')use App\Http\Requests\Dummy\CreateDummyRequest;@endif('request')
@if('request')use App\Http\Requests\Dummy\UpdateDummyRequest;@endif('request')
@if('resource')use App\Http\Resources\Dummy\DummyResource;@endif('resource')
use App\Models\Dummy;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Http\Request;

class DummyController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth:api']);
    }

    public function index()@if('resource'): AnonymousResourceCollection @endif('resource')
    {
        $dummies = Dummy::@if('filter')useFilters()->@endif('filter')dynamicPaginate();

        return @if('resource')DummyResource::collection(@endif('resource')$dummies@if('resource'))@endif('resource');
    }

    public function store(@if('request')CreateDummy@endif('request')Request $request): JsonResponse
    {
        $dummy = Dummy::create($request->validated());

        return $this->responseCreated('Dummy created successfully', @if('resource')new DummyResource(@endif('resource')$dummy@if('resource'))@endif('resource'));
    }

    public function show(Dummy $dummy): JsonResponse
    {
        return $this->responseSuccess(null, @if('resource')new DummyResource(@endif('resource')$dummy@if('resource'))@endif('resource'));
    }

    public function update(@if('request')UpdateDummy@endif('request')Request $request, Dummy $dummy): JsonResponse
    {
        $dummy->update($request->validated());

        return $this->responseSuccess('Dummy updated Successfully', @if('resource')new DummyResource(@endif('resource')$dummy@if('resource'))@endif('resource'));
    }

    public function destroy(Dummy $dummy): JsonResponse
    {
        $dummy->delete();

        return $this->responseDeleted();
    }
@if('soft-delete')
    public function restore($id): JsonResponse
    {
        $dummy = Dummy::onlyTrashed()->findOrFail($id);

        $dummy->restore();

        return $this->responseSuccess('Dummy restored Successfully.');
    }

    public function permanentDelete($id): JsonResponse
    {
        $dummy = Dummy::withTrashed()->findOrFail($id);

        $dummy->forceDelete();

        return $this->responseDeleted();
    }
@endif('soft-delete')
}
